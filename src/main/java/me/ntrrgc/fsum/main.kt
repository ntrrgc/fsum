package me.ntrrgc.fsum

import com.sun.xml.internal.fastinfoset.algorithm.HexadecimalEncodingAlgorithm
import io.reactivex.Flowable
import io.reactivex.internal.operators.flowable.FlowableFromArray
import io.reactivex.internal.operators.flowable.FlowableFromIterable
import java.beans.XMLDecoder
import java.io.*
import java.nio.charset.Charset
import java.security.MessageDigest
import java.util.*

val ignoreFilePatterns = setOf(
        Regex("""^desktop\.ini$"""),
        Regex("""^Thumbs\.db$"""),
        Regex("""^\.DS_Store$"""),
        Regex("""^\.directory$""")
)

val ignoreDirectoryPatterns = setOf(
        Regex("""^@eaDir$"""),
        Regex("""^\.Trash-[0-9]+$"""),
        Regex("""^#recycle$"""),
        Regex("""^__MACOSX$""")
)

fun shouldIgnoreFile(name: String): Boolean {
    return ignoreFilePatterns.any { it.matches(name) }
}

fun shouldIgnoreDirectory(name: String): Boolean {
    return ignoreDirectoryPatterns.any { it.matches(name) }
}

data class ArchiveFile(
        val name: String,
        val size: Long?,
        val folder: Folder
)

data class Folder(
        val path: String,
        val files: List<ArchiveFile>
)

data class FolderInventory(
        val folder: Folder,
        val entries: List<FileWithChecksum>
) {
    fun save() {
        FileOutputStream(File(folder.path, inventoryFileName))
                .let { BufferedOutputStream(it) }
                .let { OutputStreamWriter(it, "UTF-8") }
                .use { writer ->
                    writer.write("; Generated by fsum v1\n")
                    entries.forEach { entry ->
                        writer.write("${entry.checksum.toString().toUpperCase()} *${entry.file.name}\n")
                    }
                }
    }

    companion object {
        fun load(folder: Folder): FolderInventory {
            FileInputStream(File(folder.path, inventoryFileName))
                    .let { BufferedInputStream(it) }
                    .let { InputStreamReader(it, "UTF-8") }
                    .use { reader ->
                        val entries = reader.readLines()
                                .map { it.substringBefore(';') }
                                .filter { it.isNotBlank() }
                                .let { FlowableFromIterable(it) }
                                .map { line ->
                                    val (hash, filename) = line.split(" *", limit = 2)
                                    MessageDigest.getInstance("MD5", )
                                }
                    }
        }
    }

}

data class FileWithChecksum(
        val file: ArchiveFile,
        val checksum: Checksum
)

/** A MD5 checksum. */
data class Checksum(val bytes: ByteArray) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Checksum

        if (!Arrays.equals(bytes, other.bytes)) return false

        return true
    }

    override fun hashCode(): Int {
        return Arrays.hashCode(bytes)
    }

    override fun toString(): String {
        MessageDigest().toString()
    }
}

val inventoryFileName = "checksums.md5"

fun parseFolderInventory(folder: Folder): FolderInventory {
    val inventoryParser = XMLDecoder(FileInputStream(File(folder.path, inventoryFileName)))
    inventoryParser.readObject()
}

fun scanDirectory(rootPath: String) {
    val entries = File(rootPath).listFiles()

    val files = entries.filter { it.isFile }
            .filter { it.name != inventoryFileName }
    val subdirectories = entries.filter { it.isDirectory }


}

fun main(args: Array<String>) {
    scanDirectory("/home/ntrrgc/test-archive")
}