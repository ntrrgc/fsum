package me.ntrrgc.fsum

import java.io.*

data class FolderInventory(
        val folder: Folder,
        val entries: Map<String, Checksum>
) {

    fun save() {
        FileOutputStream(File(folder.path, inventoryFileName))
                .let { BufferedOutputStream(it) }
                .let { OutputStreamWriter(it, "UTF-8") }
                .use { writer ->
                    writer.write("; Generated by fsum v1\n")
                    entries.toSortedMap().forEach { (fileName, checksum) ->
                        writer.write("${checksum.bytes.toHexString().toUpperCase()} *$fileName\n")
                    }
                }
    }

    companion object {
        const val inventoryFileName = "checksums.md5"

        fun load(folder: Folder): FolderInventory {
            return FileInputStream(File(folder.path, inventoryFileName))
                    .let { BufferedInputStream(it) }
                    .let { InputStreamReader(it, "UTF-8") }
                    .use { reader ->
                        reader.readLines()
                                .map { it.substringBefore(';') }
                                .filter { it.isNotBlank() }
                                .map { line ->
                                    val (hash, filename) = line.split(" *", limit = 2)
                                    Pair(filename, Checksum(parseHexString(hash)))
                                }
                                .let { entries ->
                                    FolderInventory(folder, entries.toMap())
                                }
                    }
        }
    }

}